openapi: "3.0.0"
info:
  version: 2.0.0
  title: tknk_scanner API
servers:
  - url: http://0.0.0.0/api
paths:
  /analyze:
    post:
      tags:
        - analyze
      requestBody:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/conf"
      responses:
        '200':
          description: "OK response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/analyze_response"
        '404':
          description: "something wrong"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /upload:
    post:
      tags:
        - upload
      requestBody:
        content:
          application/exe:
            schema:
              type: string
              format: binary
              example: 
      responses:
        '200':
          description: "OK response"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/upload_status"
        '404':
          description: "something wrong"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /download/{UUID}:
    get:
      tags:
        - download
      parameters:
        - name: UUID
          in: path
          description: MongoDB's UUID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: "OK response"
          content:
            application/zip:
              schema:
                type: string
                format: binary
                example:
        '404':
          description: "something wrong"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /result/{UUID}:  
    get:
      tags:
        - results
      parameters:
        - name: UUID
          in: path
          description: MongoDB's UUID
          required: true
          schema:
            type: string
      responses:
        200:
          description:
            Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/report_response"
        404:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error" 

  /jobs:
    get:
      tags:
        - jobs
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/jobs"
        '404':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /page/{page_num}:
    get:
      tags:
        - results
      parameters:
        - name: page_num
          in: path
          required: true
          description: The nuber of page
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/recent_reports"
        '404':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /yara/{rule_name}:
    get:
      tags:
        - yara
      parameters:
        - name: rule_name
          in: path
          required: true
          description: detect rule name
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/yara"
        '404':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '400':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /search/{type}/{value}:
    get:
      tags:
        - results
      parameters:
        - name: type
          in: path
          required: true
          description: md5 or sha1 or sha256
          schema:
            type: string
        - name: value
          in: path
          required: true
          description: hash value
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/report_summary"  
        '404':
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    conf:
      required:
        - path
        - mode
        - time
      properties:
        path:
          type: string
          example: "target/gandcrab.exe"
        mode:
          type: string
          example: "hollows_hunter"
        time:
          type: integer
          format: int32
          example: 20
    upload_status:
      properties:
        status_code:
          type: integer
          format: int32
          example: 0
        path:
          type: string
          example: "target/hoge.exe"
    report_response:
      type: object
      required:
        - status_code
        - result
      properties:
        status_code:
          type: integer
          format: int32
          example: 0
        report:
          $ref: "#/components/schemas/report"  
    report:
      properties:
        meta:
          $ref: "#/components/schemas/meta"
        result:
          $ref: "#/components/schemas/result"
    meta:
      type: object
      properties:
        UUID:
          type: string
          example: "41ad0e99-f982-4355-abf9-b6a85078efc4"
        timestamp:
          type: string
          example: "2018-11-23T20:42:23.749302"
        setting:
          $ref: "#/components/schemas/setting"
        is_dumped:
          type: boolean
          format: int32
          example: 1
        is_matched:
          type: boolean
          format: int32
          example: 1
        comment:
          type: string
          example: "Detected with yara rule!"
        plugins:
          $ref: "#/components/schemas/plugins_conf"
    setting:
      type: object
      properties:
        mode:
          type: string
          example: "hollows_hunter"
        run_time:
          type: integer
          format: int32
          example: 20
    plugins_conf:
      type: object
      properties:
        avclass:
          type: boolean
          format: int32
          example: 1
        die:
          type: boolean
          format: int32
          example: 1
        suricata:
          type: boolean
          format: int32
          example: 1
    result:
      type: object
      properties:
        dump_files_scan:
          type: array
          items:
            $ref: "#/components/schemas/dumped_files_scan_report"
        upload_file_scan:
          $ref: "#/components/schemas/uploaded_file_scan_report"
        plugins:
          $ref: "#/components/schemas/plugins"
        connections:
          type: array
          items:
            $ref: "#/components/schemas/connection"
    connection:
      properties:
        remote_address:
          type: string
          format: string
          example: "1.1.1.1"
        remote_port:
          type: integer
          format: int32
          example: 80
        state:
          type: string
          format: string
          example: "Established"
        pid:
          type: integer
          format: int32
          example: 67892
        process_name:
          type: string
          format: string
          example: "firefox"
        path:
          type: string
          format: string
          example: "C:\\Program Files\\Mozilla Firefox\\firefox.exe"
    dumped_files_scan_report:
      properties:
        detect_rules:
          type: array
          items:
            type: string
            example: "nymaim"
        file_name:
          type: string
          example: "TempuzL51.exe"
        size:
          type: string
          example: "4.1KB"
        magic:
          type: string
          example: "PE32 executable (GUI) Intel 80386, for MS Windows"
    uploaded_file_scan_report:
      properties:
        md5:
          type: string    
          example: "b45cea3d89ee2f7087e6a6180d10b494"
        sha1:
          type: string
          example: "ba74895fbf97bb6d88e2ed2df0853c21b6a93a33"
        sha256:
          type: string
          example: "27c064b345343c9d3152164b8ea0f777e71ce9c4bd7b79ae39fd716533dd8b49"
        detect_rules:
          type: array
          items:
            type: string
            example: "nymaim"
        file_name:
          type: string
          example: "TempuzL51.exe"
        size:
          type: string
          example: "86.0KB"
        magic:
          type: string
          example: "PE32 executable (GUI) Intel 80386, for MS Windows"    
    plugins:
      properties:
        avclass_key:
          $ref: "#/components/schemas/avclass"
        die:
          type: string
          example: 
            - "PE: compiler: MASM32(8-11)[-]"
            - "PE: linker: Microsoft Linker(12.0)[EXE32]"
        suricata:
           $ref: "#/components/schemas/suricata"
    avclass:
      type: object
      properties:
        flag:
          type: integer
          format: int32
          example: 1
        detects:
          type: array
          items:
            $ref: "#/components/schemas/detect"
    detect:
      properties:
        family_name:
          type: string
          example: "nymaim"
        count:
          type: integer
          format: int32
          example: 2
    suricata:
      properties:
        events:
          type: array
          items:
            $ref: "#/components/schemas/event"
    event:
      type: object
      properties:
        event_type:
          type: string
          example: "alert"
        timestamp:
          type: string
          example: "2019-06-12T15:44:32.440396+0000"
        alert:
          type: object
          properties:
            category:
              type: string
              example: "A Network Trojan was detected"
            signature:
              type: string
              example: "MALWARE-CNC Win.Trojan.Revenge RAT inbound heartbeat check"
            signature_id:
              type: integer
              format: int32
              example: 45962
        proto:
          type: string
          example: "TCP"
        dest_ip:
          type: string
          example: "192.168.122.2"
        dest_port:
          type: integer
          format: int32
          example: 56248
        src_ip:
          type: string
          example: "35.231.236.85"
        src_port:
          type: integer
          format: int32
          example: 333
        http:
          type: object
          properties:
            hostname:
              type: string
              example: "vbih.tk"
            http_method:
              type: string
              example: "POST"
            http_user_agent:
              type: string
              example: "Mozilla/4.08 (Charon; Inferno)"
            length:
              type: integer
              format: int32
              example: 0
            protocol:
              type: string
              example: "HTTP/1.0"
            url:
              type: string
              example: "/V1/five/fre.php"
    recent_reports:
      properties:
        reports:
          type: array
          items:
            $ref: "#/components/schemas/report_summary"
        page_size:
          type: integer
          format: int32
          example: 1
    report_summary:
      properties:
        meta:
          $ref: "#/components/schemas/meta"
        detect_rules_summary:
          type: array
          items:
            $ref: "#/components/schemas/detect_rules_summary"
    detect_rules_summary:
      type: string
      example: "nymaimr
    
    jobs:
      properties:
        current_job:
          $ref: "#/components/schemas/job"
        queued_jobs:
          type: array
          items:
            $ref: "#/components/schemas/job"     
    job:
      properties:
        config:
            $ref: "#/components/schemas/job_conf"  
        id:
          type: string
          example: "de9e01a2-7603-4098-8503-e82742a4b2c1"
    job_conf:
      properties:
        target_file:
          type: string
          example: "netwire1"
        mode:
          type: string
          example: "hollows_hunter"
        time:
          type: integer
          format: int32
          example: 20
        timestamp:
          type: integer
          format: int32
          example: 1542780044
    yara:
      properties:
        status_code:
          type: integer
          format: int32
          example: 0
        rule:
          type: string
          example: "rule Emotet\n{\n    meta:\n        author = \"kevoreilly\"\n        description = \"Emotet Payload\"\n        cape_type = \"Emotet Payload\"\n    strings:\n        $snippet1 = {FF 15 ?? ?? ?? ?? 83 C4 0C 68 40 00 00 F0 6A 18}\n        $snippet2 = {6A 13 68 01 00 01 00 FF 15 ?? ?? ?? ?? 85 C0}\n        $snippet3 = {83 3D ?? ?? ?? ?? 00 C7 05 ?? ?? ?? ?? ?? ?? ?? ?? C7 05 ?? ?? ?? ?? ?? ?? ?? ?? 74 0A 51 E8 ?? ?? ?? ?? 83 C4 04 C3 33 C0 C3}\n        $snippet4 = {33 C0 C7 05 ?? ?? ?? ?? ?? ?? ?? ?? C7 05 ?? ?? ?? ?? ?? ?? ?? ?? A3 ?? ?? ?? ?? A3 ?? ?? ?? ?? A3 ?? ?? ?? ?? 39 05 ?? ?? ?? ?? 74 1D 8D 49 00 40 A3 ?? ?? ?? ?? 83 3C C5 ?? ?? ?? ?? 00 75 F0 51 E8 ?? ?? ?? ?? 83 C4 04 C3}\n    condition:\n        //check for MZ Signature at offset 0\n        uint16(0) == 0x5A4D and (($snippet1) and ($snippet2)) or ($snippet3) or ($snippet4)\n}\n"
    analyze_response:
      properties:
        UUID:
          type: string
          example: "41ad0e99-f982-4355-abf9-b6a85078efc4"
        message:
          type: string
          example: "Submission Success!"
        status_code:
            type: integer
            format: int32
            example: 0
    Error:
      required:
        - status_code
        - message
      properties:
        status_code:
          type: integer
          format: int32
          example: 2
        message:
          type: string
